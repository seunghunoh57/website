{"version":3,"sources":["resources/profile.jpg","resources/resume.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","createExperience","experience","index","key","className","role","href","link","target","rel","company","term","state","experiences","src","profile","alt","id","this","map","exp","idx","resume","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8uCC0F5BC,EApFf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,iBAAmB,SAACC,EAAYC,GAC9B,OACE,wBAAIC,IAAKD,EAAOE,UAAU,cACxB,uBAAGA,UAAU,eACVH,EAAWI,KADd,KACsB,IACpB,uBACED,UAAU,WACVE,KAAML,EAAWM,KACjBC,OAAO,SACPC,IAAI,uBAEHR,EAAWS,UAGhB,uBAAGN,UAAU,YAAYH,EAAWU,QAjBxC,EAAKC,MAAQ,CAACC,eAFG,EADrB,sEAyBY,IAAD,OACP,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,yBACb,yBAAKU,IAAKC,IAASX,UAAU,eAAeY,IAAI,aAElD,yBAAKZ,UAAU,mBACb,uBAAGa,GAAG,QAAN,eACA,yBAAKb,UAAU,wBACb,uBAAGA,UAAU,SAAb,cACA,wBAAIA,UAAU,mBACXc,KAAKN,MAAMC,YAAYM,KAAI,SAACC,EAAKC,GAChC,OAAO,EAAKrB,iBAAiBoB,EAAKC,QAIxC,yBAAKjB,UAAU,cACb,uBAAGA,UAAU,gBAAb,YACA,uBACEA,UAAU,WACVE,KAAMgB,IACNd,OAAO,SACPC,IAAI,uBAJN,UAQA,uBACEL,UAAU,WACVE,KAAK,kCACLE,OAAO,SACPC,IAAI,uBAJN,UAQA,uBACEL,UAAU,WACVE,KAAK,qCACLE,OAAO,SACPC,IAAI,uBAJN,YAQA,uBACEL,UAAU,WACVE,KAAK,iCACLE,OAAO,SACPC,IAAI,uBAJN,iBApEd,GAAyBc,IAAMC,WCMXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3cc3a4a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.7d324c2c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resume.9de9774a.pdf\";","import React from \"react\";\r\nimport \"./App.css\";\r\nimport profile from \"./resources/profile.jpg\";\r\nimport resume from \"./resources/resume.pdf\";\r\nimport experiences from \"./resources/experiences.json\";\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {experiences};\r\n  }\r\n\r\n  createExperience = (experience, index) => {\r\n    return (\r\n      <li key={index} className=\"experience\">\r\n        <p className=\"exp-company\">\r\n          {experience.role} |{\" \"}\r\n          <a\r\n            className=\"exp-link\"\r\n            href={experience.link}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {experience.company}\r\n          </a>\r\n        </p>\r\n        <p className=\"exp-term\">{experience.term}</p>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"App-fixed-picture-div\">\r\n            <img src={profile} className=\"App-portrait\" alt=\"profile\" />\r\n          </div>\r\n          <div className=\"App-content-div\">\r\n            <p id=\"name\">Seunghun Oh</p>\r\n            <div className=\"experience-container\">\r\n              <p className=\"title\">EXPERIENCE</p>\r\n              <ul className=\"experience-list\">\r\n                {this.state.experiences.map((exp, idx) => {\r\n                  return this.createExperience(exp, idx);\r\n                })}\r\n              </ul>\r\n            </div>\r\n            <div className=\"App-footer\">\r\n              <p className=\"footer-title\">CONTACTS</p>\r\n              <a\r\n                className=\"App-link\"\r\n                href={resume}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Resume\r\n              </a>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://github.com/seunghunoh57\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Github\r\n              </a>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://linkedin.com/in/seunghunoh\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Linkedin\r\n              </a>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"mailto:seunghun.oh57@gmail.com\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Email\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}