{"version":3,"sources":["resources/profile.jpg","resources/resume.pdf","components/Experiences.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Experiences","experience","index","console","log","key","className","role","href","link","target","rel","company","term","App","props","state","experiences","src","profile","alt","id","this","map","exp","idx","Button","resume","sx","fontSize","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,8vCCsB5BC,EApBK,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,MAEhC,OADAC,QAAQC,IAAIH,EAAYC,GAEtB,wBAAIG,IAAKH,EAAOI,UAAU,cACxB,uBAAGA,UAAU,eACVL,EAAWM,KADd,MACuB,IACrB,uBACED,UAAU,WACVE,KAAMP,EAAWQ,KACjBC,OAAO,SACPC,IAAI,uBAEHV,EAAWW,UAGhB,uBAAGN,UAAU,YAAYL,EAAWY,Q,4ECoD3BC,G,wBArDf,kDACC,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CAAEC,eAFG,EADpB,0CAQC,WACC,OACC,yBAAKX,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKA,UAAU,yBACd,yBAAKY,IAAKC,IAASb,UAAU,eAAec,IAAI,aAEjD,yBAAKd,UAAU,mBACd,uBAAGe,GAAG,QAAN,eACA,yBAAKf,UAAU,wBACd,uBAAGA,UAAU,SAAb,cACA,wBAAIA,UAAU,mBACZgB,KAAKN,MAAMC,YAAYM,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAaxB,WAAYuB,EAAKtB,MAAOuB,SAI/C,yBAAKnB,UAAU,cACd,uBAAGA,UAAU,gBAAb,YACA,kBAACoB,EAAA,EAAD,CAAQlB,KAAMmB,KACb,kBAAC,IAAD,CACCC,GAAI,CAAEC,SAAU,GAAIC,MAAO,cAG7B,kBAACJ,EAAA,EAAD,CAAQlB,KAAK,mCACZ,kBAAC,IAAD,CACCoB,GAAI,CAAEC,SAAU,GAAIC,MAAO,cAG7B,kBAACJ,EAAA,EAAD,CAAQlB,KAAK,sCACZ,kBAAC,IAAD,CACCoB,GAAI,CAAEC,SAAU,GAAIC,MAAO,cAG7B,kBAACJ,EAAA,EAAD,CAAQlB,KAAK,kCACZ,kBAAC,IAAD,CAAWoB,GAAI,CAAEC,SAAU,GAAIC,MAAO,sBA3C9C,GAAyBC,IAAMC,YCJXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8536499f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.7d324c2c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resume.2fd11265.pdf\";","import React from \"react\";\r\n\r\nconst Experiences = ({experience, index}) => {\r\n  console.log(experience, index);\r\n  return (\r\n    <li key={index} className=\"experience\">\r\n      <p className=\"exp-company\">\r\n        {experience.role} | {\" \"}\r\n        <a\r\n          className=\"exp-link\"\r\n          href={experience.link}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {experience.company}\r\n        </a>\r\n      </p>\r\n      <p className=\"exp-term\">{experience.term}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Experiences;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport profile from \"./resources/profile.jpg\";\r\nimport resume from \"./resources/resume.pdf\";\r\nimport experiences from \"./resources/experiences.json\";\r\nimport Experiences from \"./components/Experiences\";\r\nimport Button from \"@mui/material/Button\";\r\nimport GithubIcon from \"@mui/icons-material/GitHub\";\r\nimport HistoryEduIcon from \"@mui/icons-material/HistoryEdu\";\r\nimport LinkedInIcon from \"@mui/icons-material/LinkedIn\";\r\nimport EmailIcon from \"@mui/icons-material/Email\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\n\r\nexport class App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { experiences };\r\n\t}\r\n\r\n\t// var Footer = ({link, title}) => <Button href={link}>{title}</Button>;\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<div className=\"App-fixed-picture-div\">\r\n\t\t\t\t\t\t<img src={profile} className=\"App-portrait\" alt=\"profile\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"App-content-div\">\r\n\t\t\t\t\t\t<p id=\"name\">Seunghun Oh</p>\r\n\t\t\t\t\t\t<div className=\"experience-container\">\r\n\t\t\t\t\t\t\t<p className=\"title\">EXPERIENCE</p>\r\n\t\t\t\t\t\t\t<ul className=\"experience-list\">\r\n\t\t\t\t\t\t\t\t{this.state.experiences.map((exp, idx) => {\r\n\t\t\t\t\t\t\t\t\treturn <Experiences experience={exp} index={idx} />;\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"App-footer\">\r\n\t\t\t\t\t\t\t<p className=\"footer-title\">CONTACTS</p>\r\n\t\t\t\t\t\t\t<Button href={resume}>\r\n\t\t\t\t\t\t\t\t<HistoryEduIcon\r\n\t\t\t\t\t\t\t\t\tsx={{ fontSize: 30, color: \"#09d3ac\" }}\r\n\t\t\t\t\t\t\t\t></HistoryEduIcon>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button href=\"https://github.com/seunghunoh57\">\r\n\t\t\t\t\t\t\t\t<GithubIcon\r\n\t\t\t\t\t\t\t\t\tsx={{ fontSize: 30, color: \"#09d3ac\" }}\r\n\t\t\t\t\t\t\t\t></GithubIcon>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button href=\"https://linkedin.com/in/seunghunoh\">\r\n\t\t\t\t\t\t\t\t<LinkedInIcon\r\n\t\t\t\t\t\t\t\t\tsx={{ fontSize: 30, color: \"#09d3ac\" }}\r\n\t\t\t\t\t\t\t\t></LinkedInIcon>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button href=\"mailto:seunghun.oh57@gmail.com\">\r\n\t\t\t\t\t\t\t\t<EmailIcon sx={{ fontSize: 30, color: \"#09d3ac\" }}></EmailIcon>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</header>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}